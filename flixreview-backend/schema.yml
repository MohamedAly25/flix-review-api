openapi: 3.0.3
info:
  title: Movie Review API
  version: 1.0.0
  description: API documentation for Movie Review platform
paths:
  /api/movies/:
    get:
      operationId: api_movies_list
      parameters:
      - in: query
        name: genres__id
        schema:
          type: integer
      - in: query
        name: genres__slug
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieList'
          description: ''
    post:
      operationId: api_movies_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Movie'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
          description: ''
  /api/movies/{id}/:
    get:
      operationId: api_movies_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
          description: ''
    put:
      operationId: api_movies_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Movie'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
          description: ''
    patch:
      operationId: api_movies_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMovie'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMovie'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMovie'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
          description: ''
    delete:
      operationId: api_movies_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/movies/{id}/sync-tmdb/:
    post:
      operationId: api_movies_sync_tmdb_create
      description: Update an existing movie with latest data from The Movie Database
        (Admin only)
      summary: Sync movie with TMDB data
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      movie:
                        $ref: '#/components/schemas/Movie'
          description: ''
  /api/movies/genres/:
    get:
      operationId: api_movies_genres_list
      description: |-
        ViewSet for Genre CRUD operations.
        - List/Read: Anyone
        - Create/Update/Delete: Admin only
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGenreList'
          description: ''
    post:
      operationId: api_movies_genres_create
      description: |-
        ViewSet for Genre CRUD operations.
        - List/Read: Anyone
        - Create/Update/Delete: Admin only
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
  /api/movies/genres/{slug}/:
    get:
      operationId: api_movies_genres_retrieve
      description: |-
        ViewSet for Genre CRUD operations.
        - List/Read: Anyone
        - Create/Update/Delete: Admin only
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    put:
      operationId: api_movies_genres_update
      description: |-
        ViewSet for Genre CRUD operations.
        - List/Read: Anyone
        - Create/Update/Delete: Admin only
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    patch:
      operationId: api_movies_genres_partial_update
      description: |-
        ViewSet for Genre CRUD operations.
        - List/Read: Anyone
        - Create/Update/Delete: Admin only
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    delete:
      operationId: api_movies_genres_destroy
      description: |-
        ViewSet for Genre CRUD operations.
        - List/Read: Anyone
        - Create/Update/Delete: Admin only
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/movies/import-tmdb/:
    post:
      operationId: api_movies_import_tmdb_create
      description: Import a movie from The Movie Database by TMDB ID (Admin only)
      summary: Import movie from TMDB
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tmdb_id:
                  type: integer
                  description: TMDB movie ID
                force:
                  type: boolean
                  description: Force re-import if exists
                  default: false
              required:
              - tmdb_id
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
          description: ''
  /api/movies/search-tmdb/:
    get:
      operationId: api_movies_search_tmdb_list
      description: Search The Movie Database for movies by title
      summary: Search TMDB for movies
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: 'Page number (default: 1)'
      - in: query
        name: q
        schema:
          type: string
        description: Search query (movie title)
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
          description: ''
  /api/recommendations/cache/clear/:
    post:
      operationId: api_recommendations_cache_clear_create
      description: Clear cached recommendations for the authenticated user (useful
        after rating new movies)
      summary: Clear recommendation cache
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      cleared_keys:
                        type: integer
          description: ''
  /api/recommendations/dashboard/:
    get:
      operationId: api_recommendations_dashboard_retrieve
      description: |-
        Returns a comprehensive dashboard with all recommendation types.
        Useful for homepage/dashboard display.
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
          description: ''
  /api/recommendations/for-you/:
    get:
      operationId: api_recommendations_for_you_list
      description: Get personalized movie recommendations for the authenticated user
        using ML algorithms
      summary: Get personalized recommendations
      parameters:
      - in: query
        name: algorithm
        schema:
          type: string
        description: 'Algorithm type: hybrid (default), collaborative, or content'
      - in: query
        name: limit
        schema:
          type: integer
        description: 'Number of recommendations (default: 10, max: 50)'
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
          description: ''
  /api/recommendations/most-reviewed/:
    get:
      operationId: api_recommendations_most_reviewed_list
      description: |-
        Returns movies with the highest number of total reviews.
        Shows most discussed movies of all time.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieList'
          description: ''
  /api/recommendations/movies/{id}/similar/:
    get:
      operationId: api_recommendations_movies_similar_list
      description: Get movies similar to the specified movie using content-based filtering
      summary: Get similar movies
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: limit
        schema:
          type: integer
        description: 'Number of recommendations (default: 10, max: 30)'
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
          description: ''
  /api/recommendations/profile/taste/:
    get:
      operationId: api_recommendations_profile_taste_retrieve
      description: Get user's taste profile based on their rating history including
        favorite genres, statistics, and rating distribution
      summary: Get user taste profile
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
          description: ''
  /api/recommendations/recent/:
    get:
      operationId: api_recommendations_recent_list
      description: |-
        Returns recently added movies to the platform.
        Helps users discover new content.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieList'
          description: ''
  /api/recommendations/top-rated/:
    get:
      operationId: api_recommendations_top_rated_list
      description: |-
        Returns top 10 movies ordered by average rating.
        Filters out movies with no reviews.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieList'
          description: ''
  /api/recommendations/trending/:
    get:
      operationId: api_recommendations_trending_list
      description: |-
        Returns movies with most reviews in the last 30 days.
        Shows what's currently popular.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieList'
          description: ''
  /api/reviews/:
    get:
      operationId: api_reviews_list
      parameters:
      - in: query
        name: movie__genre
        schema:
          type: string
      - in: query
        name: movie__title
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: rating
        schema:
          type: integer
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
        description: |-
          * `1` - 1
          * `2` - 2
          * `3` - 3
          * `4` - 4
          * `5` - 5
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user__username
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
    post:
      operationId: api_reviews_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/reviews/{id}/:
    get:
      operationId: api_reviews_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: api_reviews_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: api_reviews_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: api_reviews_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/reviews/{id}/like/:
    post:
      operationId: api_reviews_like_create
      description: Toggle like status on a review (like if not liked, unlike if already
        liked)
      summary: Like/Unlike a review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewLikeResponse'
          description: ''
    delete:
      operationId: api_reviews_like_destroy
      description: Toggle like status on a review (like if not liked, unlike if already
        liked)
      summary: Like/Unlike a review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewLikeResponse'
          description: ''
  /api/reviews/{review_id}/comments/:
    get:
      operationId: api_reviews_comments_list
      description: List and create comments for a specific review
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: path
        name: review_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewCommentList'
          description: ''
    post:
      operationId: api_reviews_comments_create
      description: List and create comments for a specific review
      parameters:
      - in: path
        name: review_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewComment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewComment'
          description: ''
  /api/reviews/comments/{id}/:
    get:
      operationId: api_reviews_comments_retrieve
      description: Retrieve, update, or delete a comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewComment'
          description: ''
    put:
      operationId: api_reviews_comments_update
      description: Retrieve, update, or delete a comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewComment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewComment'
          description: ''
    patch:
      operationId: api_reviews_comments_partial_update
      description: Retrieve, update, or delete a comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewComment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewComment'
          description: ''
    delete:
      operationId: api_reviews_comments_destroy
      description: Retrieve, update, or delete a comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/reviews/most-liked/:
    get:
      operationId: api_reviews_most_liked_list
      description: Get most liked reviews, optionally filtered by movie
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
  /api/reviews/movie/{title}/:
    get:
      operationId: api_reviews_movie_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: rating
        schema:
          type: integer
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
        description: |-
          * `1` - 1
          * `2` - 2
          * `3` - 3
          * `4` - 4
          * `5` - 5
      - in: path
        name: title
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
  /api/reviews/search/:
    get:
      operationId: api_reviews_search_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/users/:
    get:
      operationId: api_users_list
      description: |-
        List all users (read-only).
        Supports search by username, first_name, last_name.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserListList'
          description: ''
  /api/users/{username}/:
    get:
      operationId: api_users_retrieve
      description: Retrieve a user's public profile by username.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/users/change-password/:
    post:
      operationId: api_users_change_password_create
      description: |-
        Change user password with current password verification.
        Rate limit: 3 password changes per hour per user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
  /api/users/delete-account/:
    post:
      operationId: api_users_delete_account_create
      description: |-
        Delete user account with password verification.
        Rate limit: 1 account deletion per hour per user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DeleteAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DeleteAccount'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAccount'
          description: ''
  /api/users/genres/:
    get:
      operationId: api_users_genres_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferredGenres'
          description: ''
    post:
      operationId: api_users_genres_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferredGenres'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPreferredGenres'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPreferredGenres'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferredGenres'
          description: ''
  /api/users/login/:
    post:
      operationId: api_users_login_create
      description: |-
        User login endpoint with rate limiting.
        Rate limit: 5 login attempts per minute per IP address.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenObtainPair'
          description: ''
  /api/users/profile/:
    get:
      operationId: api_users_profile_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: api_users_profile_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: api_users_profile_partial_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    delete:
      operationId: api_users_profile_destroy
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/register/:
    post:
      operationId: api_users_register_create
      description: |-
        User registration endpoint with rate limiting.
        Rate limit: 30 registration attempts per hour per IP address.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/users/token/refresh/:
    post:
      operationId: api_users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    ChangePassword:
      type: object
      properties:
        current_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        new_password_confirm:
          type: string
          writeOnly: true
      required:
      - current_password
      - new_password
      - new_password_confirm
    CustomTokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    DeleteAccount:
      type: object
      properties:
        password:
          type: string
          writeOnly: true
      required:
      - password
    Genre:
      type: object
      description: Serializer for Genre model
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        movie_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - movie_count
      - name
      - slug
      - updated_at
    Movie:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        genre:
          type: string
          readOnly: true
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          readOnly: true
        genre_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        description:
          type: string
        release_date:
          type: string
          format: date
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,2})?$
          readOnly: true
        poster_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        review_count:
          type: integer
          readOnly: true
      required:
      - avg_rating
      - created_at
      - description
      - genre
      - genres
      - id
      - release_date
      - review_count
      - title
      - updated_at
    PaginatedGenreList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
    PaginatedMovieList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
    PaginatedReviewCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ReviewComment'
    PaginatedReviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    PaginatedUserListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserList'
    PatchedGenre:
      type: object
      description: Serializer for Genre model
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        movie_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedMovie:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        genre:
          type: string
          readOnly: true
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          readOnly: true
        genre_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        description:
          type: string
        release_date:
          type: string
          format: date
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,2})?$
          readOnly: true
        poster_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        review_count:
          type: integer
          readOnly: true
    PatchedReview:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: object
          additionalProperties: {}
          readOnly: true
        movie:
          allOf:
          - $ref: '#/components/schemas/Movie'
          readOnly: true
        movie_id:
          type: integer
          writeOnly: true
        content:
          type: string
        rating:
          allOf:
          - $ref: '#/components/schemas/RatingEnum'
          minimum: -9223372036854775808
          maximum: 9223372036854775807
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_edited:
          type: boolean
          readOnly: true
        likes_count:
          type: integer
          readOnly: true
        comments_count:
          type: integer
          readOnly: true
        user_has_liked:
          type: boolean
          readOnly: true
    PatchedReviewComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: object
          additionalProperties: {}
          readOnly: true
        review:
          type: integer
          readOnly: true
        review_id:
          type: integer
          writeOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_edited:
          type: boolean
          readOnly: true
    PatchedUserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
          nullable: true
        profile_picture:
          type: string
          format: uri
          nullable: true
        profile_picture_url:
          type: string
          nullable: true
          readOnly: true
        preferred_genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          readOnly: true
        preferred_genre_ids:
          type: array
          items:
            type: integer
          readOnly: true
        last_genre_update:
          type: string
          format: date-time
          nullable: true
          readOnly: true
    RatingEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
      description: |-
        * `1` - 1
        * `2` - 2
        * `3` - 3
        * `4` - 4
        * `5` - 5
    Review:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: object
          additionalProperties: {}
          readOnly: true
        movie:
          allOf:
          - $ref: '#/components/schemas/Movie'
          readOnly: true
        movie_id:
          type: integer
          writeOnly: true
        content:
          type: string
        rating:
          allOf:
          - $ref: '#/components/schemas/RatingEnum'
          minimum: -9223372036854775808
          maximum: 9223372036854775807
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_edited:
          type: boolean
          readOnly: true
        likes_count:
          type: integer
          readOnly: true
        comments_count:
          type: integer
          readOnly: true
        user_has_liked:
          type: boolean
          readOnly: true
      required:
      - comments_count
      - content
      - created_at
      - id
      - is_edited
      - likes_count
      - movie
      - movie_id
      - rating
      - updated_at
      - user
      - user_has_liked
    ReviewComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: object
          additionalProperties: {}
          readOnly: true
        review:
          type: integer
          readOnly: true
        review_id:
          type: integer
          writeOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_edited:
          type: boolean
          readOnly: true
      required:
      - content
      - created_at
      - id
      - is_edited
      - review
      - review_id
      - updated_at
      - user
    ReviewLikeResponse:
      type: object
      properties:
        detail:
          type: string
        likes_count:
          type: integer
      required:
      - detail
      - likes_count
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    UserList:
      type: object
      description: Simplified serializer for user list view
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
          nullable: true
        profile_picture_url:
          type: string
          nullable: true
          readOnly: true
        reviews_count:
          type: integer
          readOnly: true
      required:
      - id
      - profile_picture_url
      - reviews_count
      - username
    UserPreferredGenres:
      type: object
      properties:
        preferred_genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          readOnly: true
        preferred_genre_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        last_genre_update:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        cooldown_active:
          type: boolean
          readOnly: true
        next_update_available_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        days_until_next_update:
          type: integer
          readOnly: true
      required:
      - cooldown_active
      - days_until_next_update
      - last_genre_update
      - next_update_available_at
      - preferred_genre_ids
      - preferred_genres
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
          nullable: true
        profile_picture:
          type: string
          format: uri
          nullable: true
        profile_picture_url:
          type: string
          nullable: true
          readOnly: true
        preferred_genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          readOnly: true
        preferred_genre_ids:
          type: array
          items:
            type: integer
          readOnly: true
        last_genre_update:
          type: string
          format: date-time
          nullable: true
          readOnly: true
      required:
      - email
      - id
      - last_genre_update
      - preferred_genre_ids
      - preferred_genres
      - profile_picture_url
      - username
    UserRegistration:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
        password_confirm:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
          nullable: true
        profile_picture:
          type: string
          format: uri
          nullable: true
      required:
      - email
      - password
      - password_confirm
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

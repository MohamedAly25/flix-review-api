# Generated by Django 5.2.7 on 2025-10-14 15:22

from django.db import migrations
from django.utils.text import slugify


def migrate_genres_from_charfield(apps, schema_editor):
	"""
	Parse existing genre CharField and migrate to Genre model.
	Handles comma-separated genres like "Action, Sci-Fi, Adventure"
	"""
	Movie = apps.get_model('movies', 'Movie')
	Genre = apps.get_model('movies', 'Genre')
	
	# Collect all unique genres from existing movies
	genre_names = set()
	for movie in Movie.objects.all():
		if movie.genre:
			# Split by comma and clean whitespace
			genres = [g.strip() for g in movie.genre.split(',')]
			genre_names.update(genres)
	
	# Create Genre objects
	genre_objects = {}
	for name in genre_names:
		if name:  # Skip empty strings
			genre_obj, created = Genre.objects.get_or_create(
				name=name,
				defaults={'slug': slugify(name)}
			)
			genre_objects[name] = genre_obj
	
	# Link movies to genres via ManyToMany
	for movie in Movie.objects.all():
		if movie.genre:
			genres = [g.strip() for g in movie.genre.split(',')]
			for genre_name in genres:
				if genre_name and genre_name in genre_objects:
					movie.genres.add(genre_objects[genre_name])


def reverse_migration(apps, schema_editor):
	"""
	Reverse migration: populate genre CharField from ManyToMany
	"""
	Movie = apps.get_model('movies', 'Movie')
	
	for movie in Movie.objects.all():
		genre_names = [genre.name for genre in movie.genres.all()]
		if genre_names:
			movie.genre = ', '.join(genre_names)
			movie.save()


class Migration(migrations.Migration):

    dependencies = [
        ("movies", "0002_genre_movie_genres"),
    ]

    operations = [
		migrations.RunPython(migrate_genres_from_charfield, reverse_migration),
	]
